package common.evaluations.rating;

import common.data.fundamental.CompanyOverview;
import common.data.fundamental.IncomeStatement;
import common.interfaces.RatingEvaluation;

/**
 * Class for evaluating the business performance of a company.
 * <p>
 * The business performance evaluation is based on the company's EBITDA (Earnings Before Interest,
 * Taxes, Depreciation, and Amortization) and total revenue. The EBITDA margin is used as a measure
 * of the company's operating profitability as a percentage of its total revenue.
 * </p>
 *
 * <p>
 * This class evaluates the EBITDA margin and returns a rating and a description of the evaluation.
 * </p>
 *
 * <ul>
 *   <li>{@code symbol} - The unique identifier for the company's stock.</li>
 *   <li>{@code EBITDA} - The earnings of the company before interest, taxes, depreciation, and amortization.</li>
 *   <li>{@code revenueTTM} - The total revenue of the company for the past twelve months.</li>
 *   <li>{@code EBITDAMargin} - The calculated EBITDA margin, representing the company's operating profitability.</li>
 *   <li>{@code rating} - The calculated rating based on the EBITDA margin.</li>
 *   <li>{@code description} - A textual description of the company's performance.</li>
 * </ul>
 *
 * @see RatingEvaluation
 * @see IncomeStatement
 * @see CompanyOverview
 *
 * @author Joar Eliason
 * @author Olivia Svensson
 */
public class BusinessPerformanceEvaluation implements RatingEvaluation {

  private final String symbol;
  private final double EBITDA;
  private final double revenueTTM;
  private double EBITDAMargin;
  private double rating;
  private String ratingDescription;

  /**
   * Constructs a new {@code BusinessPerformanceEvaluation} instance.
   *
   * @param symbol the unique identifier for the company's stock
   * @param EBITDA the earnings of the company before interest, taxes, depreciation, and amortization
   * @param revenueTTM the total revenue of the company for the past twelve months
   */
  public BusinessPerformanceEvaluation(String symbol, double EBITDA, double revenueTTM) {
    this.symbol = symbol;
    this.EBITDA = EBITDA;
    this.revenueTTM = revenueTTM;
    evaluate();
  }

  /**
   * Calculates the EBITDA margin by dividing the company's EBITDA by its total revenue.
   */
  private void evaluateEBITDAMargin() {
    EBITDAMargin = EBITDA / revenueTTM;
  }

  /**
   * Generates a rating description based on predefined ranges.
   *
   * @return the rating description
   */
  @Override
  public String getRatingDescription() {
    if (EBITDAMargin > 0.20) {
      return "Great Performance";
    } else if (EBITDAMargin > 0.15) {
      return "Good Performance";
    } else if (EBITDAMargin > 0.10) {
      return "Average Performance";
    } else if (EBITDAMargin > 0.05) {
      return "Below Average Performance";
    } else if (EBITDAMargin > 0.025) {
      return "Weak Performance";
    } else {
      return "Very Weak Performance";
    }
  }

  /**
   * Evaluates the company's performance by calculating the EBITDA margin and generating its description.
   */
  @Override
  public void evaluate() {
    evaluateEBITDAMargin();
    rating = EBITDAMargin;
    ratingDescription = getRatingDescription();
  }

  /**
   * Gets the stock symbol.
   *
   * @return the stock symbol
   */
  @Override
  public String getSymbol() {
    return symbol;
  }

  /**
   * Gets the title of the evaluation.
   *
   * <p>The title corresponds to the type of evaluation that is performed.
   *
   * @return the title of the evaluation
   */
  @Override
  public String getEvaluationTitle() {
    return "Business Performance";
  }

  /**
   * Gets the subtitle of the evaluation.
   *
   * <p>The subtitle is a short description of the data that the evaluation is based on.
   *
   * @return the subtitle of the evaluation
   */
  @Override
  public String getGeneralEvaluationInfo() {
    return String.format(
        "Understanding Business Performance:%n%n"
            + "The business performance evaluation is based on the company's performance. The performance of the "
            + "company is evaluated based on the EBITDA (Earnings Before Interest, Taxes, Depreciation, and Amortization) "
            + "and the company's total revenue. EBITDA is a financial metric used to evaluate the company's operating "
            + "performance and profitability. Total revenue refers to the total amount of income the company brings in "
            + "from selling products and/or services, encompassing both recurring and non-recurring revenue streams.%n%n"
            + "EBITDA attempts to represent the cash profit generated by the company's operations, making it an alternate "
            + "measure of profitability to net income. Comparing EBITDA with total revenue helps in assessing the efficiency "
            + "and profitability of the company's core operations."
    );
  }

  /**
   * Gets the evaluation method.
   *
   * <p>The evaluation method is a short description of how the evaluation is performed.
   *
   * @return the evaluation method
   */
  @Override
  public String getEvaluationMethodInfo() {
    return String.format(
        "Evaluation Method Explained:%n%n"
            + "The business performance of the company is evaluated by calculating the EBITDA margin, "
            + "which is a measure of a company's operating profitability as a percentage of its total "
            + "revenue. The EBITDA margin is calculated by dividing the EBITDA by the revenue of the "
            + "company for the past twelve months.%n%n"
            + "A high EBITDA margin indicates that the company has lower operating expenses relative to "
            + "its total revenue, signifying stable earnings and strong financial performance. Conversely, "
            + "a low EBITDA margin suggests issues with profitability and cash flow. The EBITDA margin is "
            + "graded as follows: more than 20%% indicates great performance, more than 15%% indicates good "
            + "performance, more than 10%% indicates average performance, more than 5%% indicates below average "
            + "performance, more than 2.5%% indicates weak performance, and less than 2.5%% indicates very weak "
            + "performance.%n%n"
            + "It is important to note that while the EBITDA margin is a useful indicator of financial performance, "
            + "it may not be as effective for companies with high levels of debt, complex business models, or high leverage. "
            + "Investors should consider the EBITDA margin in conjunction with other financial metrics and the company's overall "
            + "business context."
    );
  }

  /**
   * Gets the detailed description of the evaluation.
   *
   * @return the detailed description of the evaluation
   */
  @Override
  public String getResultDescription() {
    return String.format(
        "EBITDA Margin: %.2f%n"
            + "Market Comparison: %s%n%n"
            + "The current EBITDA margin for %s stands at %.2f, which corresponds to a market comparison "
            + "rating of '%s'. This indicates that the company's operating profitability is %s relative to the industry standard.%n%n"
            + "In summary, %s's EBITDA margin of %.2f results in a '%s' rating, suggesting that the company is %s relative to market "
            + "expectations. Investors should consider this rating alongside other financial metrics and the company's overall "
            + "financial health when making investment decisions.",
        EBITDAMargin, ratingDescription, symbol, EBITDAMargin, ratingDescription,
        ratingDescription.toLowerCase(),
        symbol, EBITDAMargin, ratingDescription, ratingDescription.toLowerCase()
    );
  }

  /**
   * Gets the calculated rating of the company's EBITDA margin.
   *
   * @return the calculated rating
   */
  @Override
  public double getRating() {
    return rating;
  }

  /**
   * Gets the EBITDA and EBITDA margin values of the company's stock.
   *
   * @return the EBITDA and EBITDA margin values
   */
  @Override
  public String getValue() {
    return String.format("EBITDA: %.2f, EBITDA Margin: %.2f", EBITDA, EBITDAMargin);
  }
}
